class:: PparamPeakWarp
summary:: Generates an array of values based on a peak envelope. The envelope can be positioned relative to the indices of the array continuously. However, unlike the related class PparamPeak, it does not wrap, but instead warps as it reaches the edges of the array. The class is intended for setting parameters of multiple spatially distributed synths simultanesously, to create spatial bias in texture. This is the pattern version of ParamPeakWarp.

related:: Classes/ParamPeakWarp, Classes/PparamCurve, Classes/PparamField, Classes/PparamLatPairs, Classes/PparamCells, Classes/PparamCellFunc, Classes/PparamDeviation, Classes/PparamFeed
categories:: Parameter Distribution

Description::

PparamPeakWarp is one of several parameter distribution patterns intended for 'topographic synthesis' of spatially differentiated textures by structuring parameter settings among synths in different output channels. The parameter distribution classes offer possibilities for global control of local spatial differentiation, which is useful both in algorithmic composition and live performance. In a mulichannel set-up, each output value can be mapped to an individual synth in a different output channel.If PparamPeakWarp is modulated over time, a dynamically moving spatial texture can be created. In high density speaker arrays one can achieve 'timbral panning' by moving the peak position continuously across the channels.

For more details see:
Nystr√∂m, E. (2018), 'Topographic Synthesis: Parameter distribution in spatial texture.' Proceedings of the International Computer Music Conference, 2018, Daegu, Korea.

classmethods::

method::new
All the below arguments, except numPoints, can be patterns.
argument::numPoints
The size of the array (quantity of channels). In topographic synthesis, each point corresponds to a synth outputting to an individual loudspeaker channel in space.
argument::peakPos
The position of the envelope peak, corresponding to an index in the array, and its respective synth/output channel.
argument::minVal
The value at the edge of the peak and any points laying outside of the peak, if the peak is smaller than the whole array.
argument::maxVal
The value at the centre of the peak.
argument::curve
The curvature of the envelope. This has critical effect on what values are generated at each point of the array. Positive values generates a concave peak; negative a convex.
argument:: length
Number of iterations.

Examples::

code::

//A simple synth to make a texture with

(
SynthDef(\whiteBPF, {| out=0, freq=1000, bw=0.5, modf=10, modmul=0, amp=0.1 |
	var noise=WhiteNoise.ar(amp)*SinOsc.kr(modf,mul:modmul,add:1-modmul);
	var filt=BHiPass4.ar(BBandPass.ar(noise,freq,bw),freq,0.6);
	Out.ar(out,filt);
}).add;
)

//define your outputs
~outputs=(0..7);//whatever your outputs are, for the below example, it is best to have them arranged in circle

(

var stereoMon=true;//if mixing down to stereo, true
var numChannels=~outputs.size;
var splaySynth = { |numChannels|
	SynthDef(\splay++numChannels, {| inbus=0, out=0 |
	var inputs=In.ar(inbus, numChannels);
	ReplaceOut.ar(out, Splay.ar(inputs))
}).add;
};

stereoMon.if({
	splaySynth.(numChannels);
	Synth(\splay++numChannels,addAction:\addToTail);//instantiate splay synth
});

Pmono(\whiteBPF, \out,~outputs,
	\times, Pexprand(0.2,1.0),//generating a stream of values to use for the pseg times below
	\peak, Pseg(Pbrown(0.0,7.0,0.2), Pkey(\times), \exp),//same position for all
	\freq, PparamPeakWarp(numPoints:~outputs.size,
		peakPos:Pkey(\peak),//same position for all
		minVal:Pseg(Pexprand(3000,16000), Pkey(\times), \exp),
		maxVal:Pseg(Pexprand(3000,16000), Pkey(\times), \exp),
		curve:Pseg(Pwhite(-6,6), Pkey(\times), \lin),
		length:inf),
	\bw, PparamPeakWarp(numPoints:~outputs.size,
		peakPos:Pkey(\peak),//same position for all
		minVal:Pseg(Pexprand(0.01,0.2), Pkey(\times), \exp),
		maxVal:Pseg(Pexprand(0.01,0.2), Pkey(\times), \exp),
		curve:Pseg(Pwhite(-6,6), Pkey(\times), \lin),
		length:inf),
	\modmul,1,
	\modf, PparamPeakWarp(numPoints:~outputs.size,
		peakPos:Pkey(\peak),//same position for all
		minVal:Pseg(Pexprand(2,40), Pkey(\times), \exp),
		maxVal:Pseg(Pexprand(2,40), Pkey(\times), \exp),
		curve:Pseg(Pwhite(-6,6), Pkey(\times), \lin),
		length:inf),
	\amp,0.5,
	\dur, 0.01
).play

)

//a synth for single grains
(
SynthDef(\sinimps,{|out=0,freq=1000,impf=10,modgliss=0.5,grainAtt=0.01,att=0.01,release=0.2|
	var imp=Impulse.kr(Env([impf,impf*modgliss],[release],\exp).kr);
	var sin=SinOsc.ar(freq)*Env.perc(grainAtt,grainAtt*2).kr(gate:imp);
	var env=Env.perc(attackTime:att,releaseTime:release).kr(doneAction:2);
	Out.ar(out, sin*env);
}).add;
)


//each temporal event consists 5 spatial grains in consecutive channels
//each temporal event is differentiated with PparamPeakWarp, the vertex being at the centre of the 5 channels. Each event has a diffuse locality.
(
//if mixing down to stereo, add this

var stereoMon=true;
var numChannels=~outputs.size;
var splaySynth = { |numChannels|
	SynthDef(\splay++numChannels, {| inbus=0, out=0 |
	var inputs=In.ar(inbus, numChannels);
	ReplaceOut.ar(out, Splay.ar(inputs))
}).add;
};

stereoMon.if({
	splaySynth.(numChannels);
	Synth(\splay++numChannels,addAction:\addToTail);//instantiate splay synth
});

Pbind(\instrument, \sinimps,
	\out,Pfunc({
		var out1=~outputs.size.rand;
		~outputs.wrapAt((out1..out1+3))
	}),//select 5 outputs
	\times, Pexprand(0.5,2.0),//generating a stream of values to use for the pseg times below
	\freq, PparamPeakWarp(5,peakPos:3,minVal:Pexprand(0.4,0.8),maxVal:1,curve:2,length:inf)*Pbrown(2000,12000,500),
	\att,PparamPeak(5,peakWidth:4,peakPos:3,minVal:Pexprand(0.02,0.03),maxVal:0.0,curve:-2,length:inf),
	\impf, PparamPeakWarp(5,peakPos:3,minVal:Pexprand(0.8,1.0),maxVal:1,curve:-2,length:inf)*Pexprand(30,100),
    \grainAtt,PparamPeakWarp(5,peakPos:3,minVal:Pexprand(0.001,0.005),maxVal:0.0,curve:-2,length:inf),
	\modgliss, PparamPeakWarp(5,peakPos:3,minVal:Pexprand(0.5,2.0),maxVal:Pexprand(0.5,2.0),curve:-2,length:inf),
	\release, PparamPeakWarp(5,peakPos:3,minVal:Pexprand(1.0,1.5),maxVal:1.0,curve:-2,length:inf)*Pexprand(0.05,0.2),
	\amp, PparamPeakWarp(5,peakPos:3,minVal:Pexprand(0.2,0.5),maxVal:1.0,curve:-2,length:inf),
	\delta, Pexprand(0.04,0.4)
).play

)


::
